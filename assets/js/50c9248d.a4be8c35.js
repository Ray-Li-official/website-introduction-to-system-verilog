"use strict";(self.webpackChunkwebsite_introduction_to_system_verilog=self.webpackChunkwebsite_introduction_to_system_verilog||[]).push([[4253],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(a),d=l,g=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1970:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var n=a(7462),l=(a(7294),a(3905));const r={sidebar_position:3},i="Abstraction Levels",o={unversionedId:"abstraction-level",id:"abstraction-level",title:"Abstraction Levels",description:"Unlike programming languages, whose purpose is to write codes to build an application, SystemVerilog, along with other HDLs, is a language that helps hardwawre engineers to design and build hardwares. Therefore, the different abstraction levels are the most crucial part for beginners to understand and distinguish from programming languages.",source:"@site/docs/3-abstraction-level.md",sourceDirName:".",slug:"/abstraction-level",permalink:"/website-introduction-to-system-verilog/docs/abstraction-level",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3-abstraction-level.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Congratulations!",permalink:"/website-introduction-to-system-verilog/docs/tutorial-basics/congratulations"},next:{title:"Tutorial - Extras",permalink:"/website-introduction-to-system-verilog/docs/category/tutorial---extras"}},s={},u=[{value:"Behavioral Level",id:"behavioral-level",level:2},{value:"Example of Behavioral Level",id:"example-of-behavioral-level",level:3},{value:"Dataflow Level",id:"dataflow-level",level:2},{value:"Example of Dataflow Level",id:"example-of-dataflow-level",level:3},{value:"Gate Level",id:"gate-level",level:2},{value:"Example of Gate Level",id:"example-of-gate-level",level:3}],c={toc:u};function p(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"abstraction-levels"},"Abstraction Levels"),(0,l.kt)("p",null,"Unlike programming languages, whose purpose is to write codes to build an application, SystemVerilog, along with other HDLs, is a language that helps hardwawre engineers to design and build hardwares. Therefore, the different abstraction levels are the most crucial part for beginners to understand and distinguish from programming languages."),(0,l.kt)("p",null,"Two patterns of abstraction level in SystemVerilog:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Higher level abstraction indicates faster building and simulation"),(0,l.kt)("li",{parentName:"ul"},"Lower level abstraction means higher accuracy in actual hardware design and time simulation.")),(0,l.kt)("h2",{id:"behavioral-level"},"Behavioral Level"),(0,l.kt)("p",null,"Behavioral level is the highest level of abstraction:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In this level of abstraction, one could use ",(0,l.kt)("strong",{parentName:"li"},"any constructs")," provided by SystemVerilog as long as he could express the desired behavior. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"initial")," and ",(0,l.kt)("strong",{parentName:"li"},"always")," are the most common contructs"),(0,l.kt)("li",{parentName:"ul"},"One is mainly focused on ",(0,l.kt)("strong",{parentName:"li"},"algorithm")," rather than hardware design by using this level of abstraction."),(0,l.kt)("li",{parentName:"ul"},"Therefore it's not ",(0,l.kt)("strong",{parentName:"li"},"cycle accurate"),"."),(0,l.kt)("li",{parentName:"ul"},"Therefore it might ",(0,l.kt)("strong",{parentName:"li"},"not be synthesizable"),".")),(0,l.kt)("h3",{id:"example-of-behavioral-level"},"Example of Behavioral Level"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-verilog"},"module mux_2_to_1_behavior(\n    input logic in[1:0],\n    input logic sel,\n    output logic out\n);\n    always(@sel or in)\n    begin\n        if(sel == 0)\n            out = in[0];\n        else\n            out = in[1];\n    end\nendmodule\n")),(0,l.kt)("h2",{id:"dataflow-level"},"Dataflow Level"),(0,l.kt)("p",null,"Dataflow level is the second-highest level of abstraction:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Using ",(0,l.kt)("strong",{parentName:"li"},"Logic Equations")," and ",(0,l.kt)("strong",{parentName:"li"},"Boolean Expressions")," for data processing."),(0,l.kt)("li",{parentName:"ul"},"Using ",(0,l.kt)("strong",{parentName:"li"},"continuous assignment")," in this level of abstraction."),(0,l.kt)("li",{parentName:"ul"},"All designs in this level are ",(0,l.kt)("strong",{parentName:"li"},"synthesizable"),", with ",(0,l.kt)("strong",{parentName:"li"},"no hardware implementation")," needed.")),(0,l.kt)("h3",{id:"example-of-dataflow-level"},"Example of Dataflow Level"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-verilog"},"module mux_2_to_1_dataflow(\n    input logic in0, in1\n    input logic sel,\n    output logic out\n);\n    \n    assign out = (!sel && in0) || (sel && in1);\nendmodule\n")),(0,l.kt)("h2",{id:"gate-level"},"Gate Level"),(0,l.kt)("p",null,"Gate level is the third-highest level of abstraction in SystemVerilog, a.k.a., the second-lowest level of abstraction:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Focus on ",(0,l.kt)("strong",{parentName:"li"},"hardware implementation"),"."),(0,l.kt)("li",{parentName:"ul"},"Gaining ",(0,l.kt)("strong",{parentName:"li"},"Actual logic gates")," and ",(0,l.kt)("strong",{parentName:"li"},"Time accuracy"),".")),(0,l.kt)("h3",{id:"example-of-gate-level"},"Example of Gate Level"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-verilog",metastring:"showLineNumbers",showLineNumbers:!0},"module mux_2_to_1_dataflow(\n    input logic in0, in1\n    input logic sel,\n    output logic out\n);\n    \n    wire a0, a1, inv_sel;\n    not G1(inv_sel, sel);\n    and G2(a0, in0, inv_sel);\n    and G3(a1, in1, sel);\n    or #1.5 G4(out, a0, a1);\nendmodule\n")),(0,l.kt)("p",null,"Some notes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"wire, not, and, or")," are built-in gate level primitives in SystemVerilog"),(0,l.kt)("li",{parentName:"ul"})))}p.isMDXComponent=!0}}]);