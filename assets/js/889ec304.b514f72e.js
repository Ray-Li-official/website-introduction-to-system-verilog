"use strict";(self.webpackChunkwebsite_introduction_to_system_verilog=self.webpackChunkwebsite_introduction_to_system_verilog||[]).push([[989],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:4},i="Module Basic",l={unversionedId:"module-basic",id:"module-basic",title:"Module Basic",description:"Module Anatomy",source:"@site/docs/4-module-basic.md",sourceDirName:".",slug:"/module-basic",permalink:"/website-introduction-to-system-verilog/docs/module-basic",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/4-module-basic.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Abstraction Levels",permalink:"/website-introduction-to-system-verilog/docs/abstraction-level"},next:{title:"Data Type",permalink:"/website-introduction-to-system-verilog/docs/data-type"}},s={},u=[{value:"Module Anatomy",id:"module-anatomy",level:2},{value:"Port Declaration",id:"port-declaration",level:2},{value:"Module Instantiation",id:"module-instantiation",level:2},{value:"Ports connection",id:"ports-connection",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"module-basic"},"Module Basic"),(0,o.kt)("h2",{id:"module-anatomy"},"Module Anatomy"),(0,o.kt)("p",null,"A module in SystemVerilog is a container that inputs and outputs some values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Module ",(0,o.kt)("strong",{parentName:"li"},"start")," and ",(0,o.kt)("strong",{parentName:"li"},"end")," declaration."),(0,o.kt)("li",{parentName:"ul"},"Optional ",(0,o.kt)("strong",{parentName:"li"},"parameter")," lists."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Ports")," declaration with ",(0,o.kt)("strong",{parentName:"li"},"direction"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Local Variables"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Statements")," that defines functionality and timing."),(0,o.kt)("li",{parentName:"ul"},"Instances of other ",(0,o.kt)("strong",{parentName:"li"},"modules"),".(yes, you can use modules inside module)")),(0,o.kt)("h2",{id:""}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"module example_4_1_counter //module start\n    #(parameter WIDTH=4) // Parameter declaration\n    (\n        input logic clk,\n        input logic clear,\n        output logic [WIDTH-1:0] count\n    );\n\nlogic[WIDTH-1:0] cnt; // Local variable declaration\n\n// Statements that defines functionality and timing.\nalways @(posedge clk or posedge clear)\n begin\n if (clear == 1)\n cnt = 0;\n else\n cnt = cnt + 1;\n end\n\n assign count = cnt;\n\nendmodule: counter //module end\n")),(0,o.kt)("h2",{id:"port-declaration"},"Port Declaration"),(0,o.kt)("p",null,"Ports are signals that act as inputs and outputs and each port contains ",(0,o.kt)("strong",{parentName:"p"},"name, direction, width")," and ",(0,o.kt)("strong",{parentName:"p"},"type"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Direction:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"input: data flows into the module."),(0,o.kt)("li",{parentName:"ul"},"output: data flows out from the module."),(0,o.kt)("li",{parentName:"ul"},"inout: data that flows into and out from the module."),(0,o.kt)("li",{parentName:"ul"},"Default direction is ",(0,o.kt)("strong",{parentName:"li"},"input")," if not specified."))),(0,o.kt)("li",{parentName:"ul"},"Width:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Default value if ",(0,o.kt)("strong",{parentName:"li"},"1")," if not specified."))),(0,o.kt)("li",{parentName:"ul"},"Type:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"wire: can be treated as ",(0,o.kt)("strong",{parentName:"li"},"physical")," wire; Values are ",(0,o.kt)("strong",{parentName:"li"},"not stored"),"; Driven by either ",(0,o.kt)("strong",{parentName:"li"},"Continuous Assignments")," or ",(0,o.kt)("strong",{parentName:"li"},"from port of a module"),"."),(0,o.kt)("li",{parentName:"ul"},"Logic: not necessarily ",(0,o.kt)("strong",{parentName:"li"},"synthesizable"),"; Represented as ",(0,o.kt)("strong",{parentName:"li"},"storage unit")," in SystemVerilog; Driven by ",(0,o.kt)("strong",{parentName:"li"},"any kinds of assignments"),"."),(0,o.kt)("li",{parentName:"ul"},"Reg: not necessarily ",(0,o.kt)("strong",{parentName:"li"},"synthesizable"),"; Represented as ",(0,o.kt)("strong",{parentName:"li"},"storage unit")," in SystemVerilog; Retain the value till next value is assigned(not through assign statement)."),(0,o.kt)("li",{parentName:"ul"},"input/inout could only use ",(0,o.kt)("strong",{parentName:"li"},"wire")," or ",(0,o.kt)("strong",{parentName:"li"},"logic")," as its type."),(0,o.kt)("li",{parentName:"ul"},"output could use ",(0,o.kt)("strong",{parentName:"li"},"all")," the types."),(0,o.kt)("li",{parentName:"ul"},"Default type is ",(0,o.kt)("strong",{parentName:"li"},"wire")," if not specified ")))),(0,o.kt)("h2",{id:"module-instantiation"},"Module Instantiation"),(0,o.kt)("p",null,"As mentioned above, one could use modules in module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"module toplevel_design (\n inputwire[7:0] operand1,\n inputwire[7:0] operand2,\n inputwire select,\n output wire result\n );\n\n // Declare local nets\n wire c1, c2;\n\n// Instantiation of module reduction_and\n reduction_and inst1(operand1, c1);\n\n // Instantiation of module reduction_or\n reduction_or inst2(operand2, c2);\n // Instantiation of module mux_2to1\n mux_2to1 inst3(c1, c2, select, result);\nendmodule: toplevel_design\n")),(0,o.kt)("h2",{id:"ports-connection"},"Ports connection"),(0,o.kt)("p",null,"Just like any other programming languages: one need to parse the arguements to the function if they want to use them, in SystemVerilog, we need to connect the ports from parental module to the child modules. And in hardware design, we have four different ways to declare such connects:"),(0,o.kt)("p",null,"Assume we want to connects ports: a, b, c from the parental module to the child module ports: x, y, z:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"port order:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// port order\nwire a, b, c;\ncircuit inst1 (\n a,\n b,\n c\n);\n")),(0,o.kt)("p",null,"Then a is connected to x, b is connected to y, c is connected to z."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"explicit:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// port order\nwire a, b, c;\ncircuit inst1 (\n .z(a),\n .y(b),\n .x(c)\n);\n")),(0,o.kt)("p",null,"Then a is connected to z, b is connected to y, c is connected to x."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Dot-name:\nDot-name can be combined with explicit.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-verilog"},"// port order\nwire a, b, c;\ncircuit inst1 (\n .z(a),\n .c,\n .b\n);\n")),(0,o.kt)("p",null,"Then a is connected to z, b is connected to y, c is connected to x."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"star order:\nIt's the quickest way to connect. Learn more about this connection on the internet.")))}p.isMDXComponent=!0}}]);